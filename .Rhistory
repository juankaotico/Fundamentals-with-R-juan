data.frame(A=1:4, B=8:1)
data.frame(A=1:4, B=8:1, 20:25)
data.frame(A=1:4, B=8:1, 1:8)
data.frame(A=1:4, B=8:1)
data.frame(A=1:4, 8:1)
install.packages(c("knitr", "readxl"))
install.packages("ggplot2")
install.packages("qwraps2")
install.packages(c("expss", "fBasics", "janitor", "summarytools", "writexl"))
install.packages(c("leaflet", "plotly", "table1"))
load("C:/Users/toshiba/Downloads/Pima_diabetes.RData")
load("C:/Users/toshiba/Downloads/NoShowdata.RData")
load("C:/Users/toshiba/Downloads/KiGGS03_06.RData")
load("C:/Users/toshiba/Downloads/hrs.RData")
load("C:/Users/toshiba/Downloads/nhanes.RData")
load("C:/Users/toshiba/Downloads/kiggs_midterm.RData")
load("C:/Users/toshiba/Downloads/kiggs_midterm.RData")
View(kiggs)
View(kiggs)
View(kiggs)
str(kiggs)
summary(kiggs)
head(kiggs)
table(kiggs$residence1)
table(kiggs$sex)
table(kiggs$age)
table(kiggs$sbp)
table(kiggs$bmi_metric)
table(kiggs$bmi_cat)
table(kiggs$shortsight)
is.na(kiggs$sbp)
table(is.na(kiggs$sbp))
table(kiggs$ID)
table(table(kiggs$ID))
761+19
799-780
table(is.na(kiggs$id))
table(is.na(kiggs$age))
table(is.na(kiggs$sbp))
table(is.na(kiggs$bmi_cat))
table(is.na(kiggs$shortsight))
new_var_sbp <- kiggs$sbp[!is.na(kiggs$sbp)]
table(new_var_sbp)
is.na(new_var_sbp)
table(is.na(new_var_sbp))
mean(new_var_sbp)
kiggs$new_var_sbp <- kiggs$sbp[!is.na(kiggs$sbp)]
kiggs$sbp(new_var_sbp)
kiggs$sbp[new_var_sbp]
table(kiggs$sbp[new_var_sbp])
table(is.na(kiggs$sbp[new_var_sbp]))
kiggs$newsbp <- kiggs$sbp[!is.na(kiggs$sbp)]
mean(kiggs$sbp[new_var_sbp])
table(is.na(kiggs$sbp))
mean(kiggs$sbp)
table(new_var_sbp)
is.na(new_var_sbp)
table(is.na(new_var_sbp))
kiggs$sbp[new_var_sbp]
table(is.na(kiggs$sbp[new_var_sbp]))
mean(kiggs$sbp[new_var_sbp])
mean(as.numeric(kiggs$sbp[new_var_sbp]))
kiggs$newsbp <- kiggs$sbp[!is.na(kiggs$sbp)]
kiggs$sbp[new_var_sbp]
is.numeric(kiggs$sbp[new_var_sbp])
as.numeric(kiggs$sbp[new_var_sbp])
as.double(kiggs$sbp[new_var_sbp])
kiggs$sbp[new_var_sbp]
as.double(kiggs$sbp[new_var_sbp])
kiggs$sbp[new_var_sbp]
as.numeric(as-charachter(kiggs$sbp[new_var_sbp]))
as.numeric(as.charachter(kiggs$sbp[new_var_sbp]))
as.numeric(as.character(kiggs$sbp[new_var_sbp]))
mean(as.numeric(as.character(kiggs$sbp[new_var_sbp]))
)
mean(as.numeric(as.character(kiggs$sbp[!is.na(kiggs$sbp])))
mean(as.numeric(as.character(kiggs$sbp[!is.na(kiggs$sbp)])))
round(mean(as.numeric(kiggs$sbp[new_var_sbp])), digits = 1)
round(mean(as.numeric(kiggs$sbp[new_var_sbp])), digits = 2)
round(mean(as.numeric(kiggs$sbp[new_var_sbp])), digits = 3)
table(kiggs$bmi_metric)
mean(kiggs$bmi_metric)
str(kiggs$bmi_metric)
mean((kiggs$bmi_metric[!is.na(kiggs$bmi_metric)]))
table(kiggs$bmi_metric > 40)
table(kiggs$sex)
bmi_female <- kiggs$bmi_cat[kiggs$sex == "girls"]
bmi_male <- kiggs$bmi_cat[kiggs$sex == "boys"]
t.test(bmi_male, bmi_female)
is.numeric(bmi_female)
bmi_female <- kiggs$bmi_metric[kiggs$sex == "girls"]
bmi_male <- kiggs$bmi_metric[kiggs$sex == "boys"]
t.test(bmi_male, bmi_female)
#8.
hist(((kiggs$bmi_metric[!is.na(kiggs$bmi_metric)])))
str(kiggs$shortsight)
table(kiggs$shortsight)
87/585
table(kiggs$shortsight, kiggs$sex)
43/(43+297)
44/(44+288)
abc <- 43/(43+297)
abc1 <- 44/(44+288)
odds.boys <- abc/(1-abc)
odds.girls <- abc1/(1-abc1)
odds.boys
odds.girls
43/(43+297)
44/(44+288)
abc <- 43/(43+297)
abc1 <- 44/(44+288)
odds.boys <- abc/(1-abc)
odds.girls <- abc1/(1-abc1)
odds.boys
odds.girls
duplicated(kiggs$ID)
table(duplicated(kiggs$ID))
vect <- c(1,2,3,4,5,6,7)
vect
vect[-(2:3)]
vect <- vect[-(2:3)]
vect
PassedAway <- c(T,T,F,T,F,F,F,T,F)
mean(passedAway)
c(6, 8) + 1:5
seq(80, 10, by=-8)
seq(80, 10, by=8)
vect <- c(4, 9, 2, 7, 6)
order(vect)
which(1:8 => 4)
which((1:8) => 4)
m1 <- matrix(1:6, ncol=2)
m2 <- matrix(1:9, ncol=3)
rbind(m1, m2)
cbind(m1, m2)
m3 <- cbind(m1, m2)
m3[1:2, 3]
m3[c(1:2, 3)]
m3
m <- matrix(1:8, ncol=2, colnames=c("A","B"))
m <- matrix(1:8,ncol=2)
colnames(m) <- c("A","B")
m
data.frame(A=45:49, B=65:69)
w <- data.frame(A=45:49, B=65:69)
w
cbind(m,w)
rbind(m,w)
my_list <- list(a="hi", b=letters, c=rnorm(10), d=pi)
my_list$d <- NULL
my_list[4]
sapply(kiggs, is.data.frame)
m
range(m)
m
m1
m2
m3
range(m3)
range(m3[,1:5])
range(m3[,1:4])
apply(m3, margin=2, range)
apply(m3, margin=2, FUN= range)
apply(m3, MARGIN = 2, FUN= range)
m
m3
## square elements of vector vec
square.vec <- function(vec)
{
# initialize output vector vec.res
vec.res <- vector()
# fill vec.res with squared elements of vec
for(x in vec) {vec.res <- c(vec.res, x^2)}
return(vec.res)
}
square.vec(c(1,2,3))
vec.res
vector()
#LOOPS
vec <- c(1:5)
vec
for(x in vec) {print (x)}
#print while iteration
vector.indices <- 1:length(word.vector)
vector.indices
#print while iteration
word.vector <- c("a", "text", "consists","of")
for(word in word.vector) {print (word)}
#same but short
for(i in 1:length(word.vector)) {print(word.vector[i])}
for(i in 1:length(word.vector)) {print(paste("Element", i, "is", word.vector[i]))}
#lenght of a vector
vec <- c(1:10)
counter <- 0
for(x in vec) {counter <- counter + 1}
counter
## function to compute length of vector vec
vec.length <- function(vec)
{
# initialize counter
counter <- 0
# iterate through vec and increase counter
for(x in vec) {counter <- counter + 1}
# return counter
return(counter)
}
vec.length(c(1:10))
vec.length(c("Hande", "Cem", "Can"))
## compute Euclidean norm of a vector vec
Euclid.norm <- function(vec)
{
# initialize norm
norm <- 0
# compute sum of squared vector elements
for(x in vec) {norm <- norm + x^2}
# sqrt of sum
norm <- sqrt(norm)
return(norm)
}
Euclid.norm(c(1, 2, 3))
sqrt(1^2+2^2+3^2)
Euclid.norm(c(sqrt(1), sqrt(3)))
## compute p-norm of a vector vec
p.norm <- function(vec, p=2)
{
# initialize norm
norm <- 0
# compute sum of exponentiated vector elements
for(x in vec) {norm <- norm + x^p}
# p radical of sum
norm <- (norm)^(1/p)
return(norm)
}
p.norm(c(1, 2, 3), p=1)
p.norm(c(1, 2, 3))
p.norm(c(1, 2, 3), p=3)
square.vec(c(1,2,3))
square.vec(7:10)
(7:10)^2
## finds locations of each word in word.vec
findwords <- function(word.vec)
{
# initialize word list
word.list <- list()
# iterate through word vector
for(i in 1:length(word.vec))
{
# store current word in variable word
word <- word.vec[i]
# add current word to word.list
word.list[[word]] <- c(word.list[[word]], i)
}
return(word.list)
}
findwords(c("a", "text", "consists", "of", "a"))
#using the input command
## finds locations of each word in file
findwords <- function(file)
{
# fill word.vec from data in file
word.vec <- scan(file, "")
# initialize word list
word.list <- list()
# iterate through word vector
for(i in 1:length(word.vec))
{
# store current word in variable word
word <- word.vec[i]
# add current word to word.list
word.list[[word]] <- c(word.list[[word]], i)
}
return(word.list)
}
findwords("wordtext.txt")
getwd()
setwd("C:/Users/toshiba/Desktop/HPI/III Semester/Fundamentals with R/repository FWR")
findwords("wordtext.txt")
{
# sort alphabetically
return(word.list[sort(names(word.list))])
}
if(sort.by.freq)
## finds locations of each word in file
findwords <- function(file, sort.by.freq = F)
{
# fill word.vec from data in file
word.vec <- scan(file, "")
# initialize word list
word.list <- list()
# iterate through word vector
for(i in 1:length(word.vec))
{
# store current word in variable word
word <- word.vec[i]
# add current word to word.list
word.list[[word]] <- c(word.list[[word]], i)
}
# sort by word frequency or else sort alphabetically
if(sort.by.freq) {return(word.list[order(sapply(word.list, length),
decreasing = T)])} else {return(word.list[sort(names(word.list))])}
}
{
# sort by word frequency
return(word.list[order(sapply(word.list, length),
decreasing = T)])
}else{
# sort alphabetically
return(word.list[sort(names(word.list))])
}
if(sort.by.freq)
{
# sort by word frequency
return(word.list[order(sapply(word.list, length),
decreasing = T)])
}else{
# sort alphabetically
return(word.list[sort(names(word.list))])
}
if(sort.by.freq)
{
# sort by word frequency
return(word.list[order(sapply(word.list, length),
decreasing = T)])
}else{
# sort alphabetically
return(word.list[sort(names(word.list))])
}
## finds locations of each word in file
findwords <- function(file, sort.by.freq = F)
{
# fill word.vec from data in file
word.vec <- scan(file, "")
# initialize word list
word.list <- list()
# iterate through word vector
for(i in 1:length(word.vec))
{
# store current word in variable word
word <- word.vec[i]
# add current word to word.list
word.list[[word]] <- c(word.list[[word]], i)
}
# sort by word frequency or else sort alphabetically
if(sort.by.freq) {return(word.list[order(sapply(word.list, length),
decreasing = T)])} else {return(word.list[sort(names(word.list))])}
}
findwords("text.txt")
findwords("text.txt", sort.by.freq=T)
getwd()
findwords("wordtext.txt")
findwords <- function(file, sort.by.freq = F)
{
# fill word.vec from data in file
word.vec <- scan(file, "")
# initialize word list
word.list <- list()
# iterate through word vector
for(i in 1:length(word.vec))
{
# store current word in variable word
word <- word.vec[i]
# add current word to word.list
word.list[[word]] <- c(word.list[[word]], i)
}
# sort by word frequency or else sort alphabetically
if(sort.by.freq) {return(word.list[order(sapply(word.list, length),
decreasing = T)])} else {return(word.list[sort(names(word.list))])}
}
findwords("text.txt")
findwords("text.txt", sort.by.freq=T)
findwords("text.txt")
findwords <- function(file, sort.by.freq = F)
{
# fill word.vec from data in file
word.vec <- scan(file, "")
# initialize word list
word.list <- list()
# iterate through word vector
for(i in 1:length(word.vec))
{
# store current word in variable word
word <- word.vec[i]
# add current word to word.list
word.list[[word]] <- c(word.list[[word]], i)
}
# sort by word frequency or else sort alphabetically
if(sort.by.freq) {return(word.list[order(sapply(word.list, length),
decreasing = T)])} else {return(word.list[sort(names(word.list))])}
}
findwords <- function(file, sort.by.freq = F)
{
# fill word.vec from data in file
word.vec <- scan(file, "")
# initialize word list
word.list <- list()
# iterate through word vector
for(i in 1:length(word.vec))
{
# store current word in variable word
word <- word.vec[i]
# add current word to word.list
word.list[[word]] <- c(word.list[[word]], i)
}
# sort by word frequency or else sort alphabetically
if(sort.by.freq) {return(word.list[order(sapply(word.list, length),
decreasing = T)])} else {return(word.list[sort(names(word.list))])}
}
findwords <- function(file)
{
# fill word.vec from data in file
word.vec <- scan(file, "")
# initialize word list
word.list <- list()
# iterate through word vector
for(i in 1:length(word.vec))
{
# store current word in variable word
word <- word.vec[i]
# add current word to word.list
word.list[[word]] <- c(word.list[[word]], i)
}
return(word.list)
}
findwords("wordtext.txt")
## finds locations of each word in file
findwords <- function(file, sort.by.freq = F)
{
# fill word.vec from data in file
word.vec <- scan(file, "")
# initialize word list
word.list <- list()
# iterate through word vector
for(i in 1:length(word.vec))
{
# store current word in variable word
word <- word.vec[i]
# add current word to word.list
word.list[[word]] <- c(word.list[[word]], i)
}
# sort by word frequency or else sort alphabetically
if(sort.by.freq) {return(word.list[order(sapply(word.list, length),
decreasing = T)])} else {return(word.list[sort(names(word.list))])}
}
findwords("text.txt")
findwords("wordtext.txt")
findwords("wordtext.txt", sort.by.freq=T)
for(i in 59:61) {i-7}
vec <- c(2,4,6)
y <- c(1,1,1)
for(i in 1:3) {y[i] <- vec[i]+1}
y
for(i in 1:5) { v[i] <- i+2 }
for(dude in c("surfer", "boy")) nchar(dude)
a <- 0
b <- c(4,7,8)
for(k in b) a <- a+k^2
a
sum(b^2)
